package com.factoreal.backend.messaging.mqtt;

import com.factoreal.backend.domain.sensor.application.SensorService;
import com.factoreal.backend.domain.sensor.dto.request.SensorCreateRequest;
import com.factoreal.backend.domain.wearable.application.WearableRepoService;
import com.factoreal.backend.domain.wearable.entity.Wearable;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class MqttService {
    private final MqttClient mqttClient;
    private final SensorService sensorService;
    private final WearableRepoService wearableRepoService;
    private static final int MAX_RETRY_ATTEMPTS = 5;
    private static final long RETRY_DELAY_MS = 2000;


    @PostConstruct
    public void subscribeToShadowUpdates() throws MqttException {
        for (String thingName : List.of("Sensor", "Wearable")) {
            IotShadowSubscription(thingName);
        }
    }
    /**
     * - ÏÑºÏÑúÏùò shadow Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤ΩÏÇ¨Ìï≠(Îì±Î°ù/ÏàòÏ†ï)ÏùÑ Íµ¨ÎèÖ
     * @throws MqttException mqtt Ïó∞Í≤∞Ïóê Ïã§Ìå®Ïãú MqttException Î∞úÏÉù
     */
    public void IotShadowSubscription(String thingName) throws MqttException {
        int retryCount = 0;
        while (retryCount < MAX_RETRY_ATTEMPTS) {
            try {
                if (!mqttClient.isConnected()) {
                    log.warn("MQTT ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§. Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ Ï§ë... (ÏãúÎèÑ {}/{})", 
                            retryCount + 1, MAX_RETRY_ATTEMPTS);
                    mqttClient.reconnect();
                    Thread.sleep(RETRY_DELAY_MS);
                }
                // #Îäî topicÏùò Ïó¨Îü¨ levelÏùÑ ÎåÄÏ≤¥ Í∞ÄÎä•, +Îäî topicÏùò Îã®Ïùº levelÏùÑ ÎåÄÏ≤¥ Í∞ÄÎä•
                String topic = "$aws/things/" + thingName + "/shadow/name/+/update/documents";
                
                mqttClient.subscribe(topic, 1, (t, msg) -> {
                    String payload = new String(msg.getPayload(), StandardCharsets.UTF_8);

                    // JSON ÌååÏã± Î∞è DB Ï†ÄÏû•ÏùÄ Ïù¥ÌõÑ Íµ¨ÌòÑ ÏòàÏ†ï
                    try {
                        ObjectMapper mapper = new ObjectMapper();
                        JsonNode jsonNode = mapper.readTree(payload);
                        // mqttÏóêÏÑú Ï†ÑÎã¨ÎêòÎäî ÎéÅÏä§Î•º Îî∞ÎùºÍ∞ÄÏïºÌï®
                        JsonNode reported = jsonNode.at("/current/state/reported");
                        Long epochSeconds = jsonNode.at("/timestamp").asLong(); // Ïòà: "1749789746"

                        log.info("üì• MQTT ÏàòÏã† (topic: {}): {}", t, jsonNode);

                        if ("Sensor".equals(thingName)) {
                            processSensorPayload(reported, epochSeconds);
                        } else if ("Wearable".equals(thingName)) {
                            processWearablePayload(reported, epochSeconds);
                        } else {
                            log.warn("‚ùì Ïïå Ïàò ÏóÜÎäî thingName ÏàòÏã†: {}", thingName);
                        }

                    } catch (DataIntegrityViolationException e) {
                        log.warn("‚ö†Ô∏è Ï§ëÎ≥µ ÏÑºÏÑú Ï†ÄÏû• ÏãúÎèÑ Ï∞®Îã®Îê®: {}", e.getMessage());
                    } catch (Exception e) {
                        log.error("‚ùå JSON ÌååÏã± ÎòêÎäî Ï†ÄÏû• Ï§ë Ïò§Î•ò: {}", e.getMessage());
                    }
                });
                
                log.info("üì° MQTT subscribe ÏôÑÎ£åÎê®: topic = {}", topic);
                return; // ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Íµ¨ÎèÖÌñàÏúºÎ©¥ Î©îÏÑúÎìú Ï¢ÖÎ£å
                
            } catch (MqttException e) {
                log.error("MQTT Ïó∞Í≤∞/Íµ¨ÎèÖ Ïã§Ìå® (ÏãúÎèÑ {}/{}): {}", 
                        retryCount + 1, MAX_RETRY_ATTEMPTS, e.getMessage());
                retryCount++;
                if (retryCount >= MAX_RETRY_ATTEMPTS) {
                    log.error(e.getMessage());
                }
                try {
                    Thread.sleep(RETRY_DELAY_MS);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    throw new MqttException(e.getReasonCode());
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                throw new MqttException(MqttException.REASON_CODE_CLIENT_EXCEPTION);
            }
        }
    }

    private void processSensorPayload(JsonNode reported, Long epochTime) {
        String sensorId = reported.at("/sensorId").asText();
        String type = reported.at("/type").asText();
        String zoneId = reported.at("/zoneId").asText();
        /* ---------- equipId / equipName Ï≤òÎ¶¨ ---------- */
        String equipIdVal = reported.path("equipId").asText(null);   // ÌÇ§Í∞Ä ÏóÜÏúºÎ©¥ null
        String equipId = (equipIdVal == null || equipIdVal.isBlank()) ? null : equipIdVal;

        if (zoneId.isBlank()) {
            log.error("‚ùå Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ zoneId: {}", zoneId);
            return;
        }

        Integer iszone = (equipId != null && equipId.equals(zoneId)) ? 1 : 0;
        LocalDateTime dateTime = LocalDateTime.ofInstant(Instant.ofEpochSecond(epochTime), ZoneId.systemDefault());
        SensorCreateRequest dto = new SensorCreateRequest(sensorId, type, zoneId, equipId, null, null, iszone);
        sensorService.saveSensor(dto, dateTime); // Ï§ëÎ≥µÏù¥Î©¥ ÏòàÏô∏ Î∞úÏÉù
        log.info("‚úÖ ÏÑºÏÑú Ï†ÄÏû• ÏôÑÎ£å: {}", sensorId);
    }

    private void processWearablePayload(JsonNode reported, Long epochTime) throws MqttException {
        String wearableId = reported.at("/wearableId").asText();
        LocalDateTime dateTime = LocalDateTime.ofInstant(Instant.ofEpochSecond(epochTime), ZoneId.systemDefault());
        Wearable wearable = Wearable.builder()
            .wearableId(wearableId)
            .createdAt(dateTime)
            .build();

        wearableRepoService.saveWearable(wearable);
    }
}
